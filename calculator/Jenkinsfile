pipeline {
    agent none

    triggers {
        cron('H 3 * * *')       // Executa diariamente às 3h
        githubPush()            // Executa automaticamente via webhook
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10')) // mantém histórico limitado
        timeout(time: 30, unit: 'MINUTES')            // timeout global
    }

    stages {
        stage('Checkout') {
            agent { label 'build-agent' }
            steps {
                dir('calculator') {
                    echo ">>> Obtendo código fonte"
                    git branch: 'main', url: 'https://github.com/alexbruno10/Test_DevOps.git'
                }
            }
        }

        stage('Lint & Format Check') {
            agent { label 'build-agent' }
            steps {
                dir('calculator') {
                    sh '''
                        echo ">>> Rodando análise estática e verificação de formatação"
                        make check || { echo "❌ Erro na checagem de código"; exit 1; }
                    '''
                }
            }
        }

        stage('Build') {
            agent { label 'build-agent' }
            steps {
                dir('calculator') {
                    sh '''
                        echo ">>> Compilando aplicação"
                        make clean
                        make all || { echo "❌ Falha na compilação"; exit 1; }
                    '''
                }
            }
        }

        stage('Unit Tests') {
            agent { label 'test-agent' }
            steps {
                dir('calculator') {
                    sh '''
                        echo ">>> Executando testes unitários"
                        make unittest || { echo "❌ Testes falharam"; exit 1; }
                    '''
                }
            }
        }

        stage('Archive Artifacts') {
            agent { label 'build-agent' }
            steps {
                dir('calculator') {
                    echo ">>> Arquivando artefatos gerados"
                    archiveArtifacts artifacts: 'bin/**/*', fingerprint: true
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline concluído com sucesso! Artefatos gerados e arquivados."
        }
        failure {
            echo "❌ Pipeline falhou. Verifique os logs e corrija os erros antes de prosseguir."
        }
    }
}
